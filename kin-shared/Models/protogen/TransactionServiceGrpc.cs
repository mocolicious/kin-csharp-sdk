// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: transaction/v4/transaction_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kin.Agora.Transaction.V4 {
  public static partial class Transaction
  {
    static readonly string __ServiceName = "kin.agora.transaction.v4.Transaction";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetServiceConfigRequest> __Marshaller_kin_agora_transaction_v4_GetServiceConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetServiceConfigRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetServiceConfigResponse> __Marshaller_kin_agora_transaction_v4_GetServiceConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetServiceConfigResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest> __Marshaller_kin_agora_transaction_v4_GetMinimumKinVersionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse> __Marshaller_kin_agora_transaction_v4_GetMinimumKinVersionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest> __Marshaller_kin_agora_transaction_v4_GetRecentBlockhashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse> __Marshaller_kin_agora_transaction_v4_GetRecentBlockhashResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest> __Marshaller_kin_agora_transaction_v4_GetMinimumBalanceForRentExemptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse> __Marshaller_kin_agora_transaction_v4_GetMinimumBalanceForRentExemptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetHistoryRequest> __Marshaller_kin_agora_transaction_v4_GetHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetHistoryRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetHistoryResponse> __Marshaller_kin_agora_transaction_v4_GetHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetHistoryResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.SubmitTransactionRequest> __Marshaller_kin_agora_transaction_v4_SubmitTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.SubmitTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.SubmitTransactionResponse> __Marshaller_kin_agora_transaction_v4_SubmitTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.SubmitTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetTransactionRequest> __Marshaller_kin_agora_transaction_v4_GetTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Transaction.V4.GetTransactionResponse> __Marshaller_kin_agora_transaction_v4_GetTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Transaction.V4.GetTransactionResponse.Parser));

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetServiceConfigRequest, global::Kin.Agora.Transaction.V4.GetServiceConfigResponse> __Method_GetServiceConfig = new grpc::Method<global::Kin.Agora.Transaction.V4.GetServiceConfigRequest, global::Kin.Agora.Transaction.V4.GetServiceConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceConfig",
        __Marshaller_kin_agora_transaction_v4_GetServiceConfigRequest,
        __Marshaller_kin_agora_transaction_v4_GetServiceConfigResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest, global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse> __Method_GetMinimumKinVersion = new grpc::Method<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest, global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMinimumKinVersion",
        __Marshaller_kin_agora_transaction_v4_GetMinimumKinVersionRequest,
        __Marshaller_kin_agora_transaction_v4_GetMinimumKinVersionResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest, global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse> __Method_GetRecentBlockhash = new grpc::Method<global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest, global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecentBlockhash",
        __Marshaller_kin_agora_transaction_v4_GetRecentBlockhashRequest,
        __Marshaller_kin_agora_transaction_v4_GetRecentBlockhashResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest, global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse> __Method_GetMinimumBalanceForRentExemption = new grpc::Method<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest, global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMinimumBalanceForRentExemption",
        __Marshaller_kin_agora_transaction_v4_GetMinimumBalanceForRentExemptionRequest,
        __Marshaller_kin_agora_transaction_v4_GetMinimumBalanceForRentExemptionResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetHistoryRequest, global::Kin.Agora.Transaction.V4.GetHistoryResponse> __Method_GetHistory = new grpc::Method<global::Kin.Agora.Transaction.V4.GetHistoryRequest, global::Kin.Agora.Transaction.V4.GetHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistory",
        __Marshaller_kin_agora_transaction_v4_GetHistoryRequest,
        __Marshaller_kin_agora_transaction_v4_GetHistoryResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.SubmitTransactionRequest, global::Kin.Agora.Transaction.V4.SubmitTransactionResponse> __Method_SubmitTransaction = new grpc::Method<global::Kin.Agora.Transaction.V4.SubmitTransactionRequest, global::Kin.Agora.Transaction.V4.SubmitTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitTransaction",
        __Marshaller_kin_agora_transaction_v4_SubmitTransactionRequest,
        __Marshaller_kin_agora_transaction_v4_SubmitTransactionResponse);

    static readonly grpc::Method<global::Kin.Agora.Transaction.V4.GetTransactionRequest, global::Kin.Agora.Transaction.V4.GetTransactionResponse> __Method_GetTransaction = new grpc::Method<global::Kin.Agora.Transaction.V4.GetTransactionRequest, global::Kin.Agora.Transaction.V4.GetTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransaction",
        __Marshaller_kin_agora_transaction_v4_GetTransactionRequest,
        __Marshaller_kin_agora_transaction_v4_GetTransactionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kin.Agora.Transaction.V4.TransactionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Transaction</summary>
    [grpc::BindServiceMethod(typeof(Transaction), "BindService")]
    public abstract partial class TransactionBase
    {
      /// <summary>
      /// GetServiceConfig returns the service and token parameters for the token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetServiceConfigResponse> GetServiceConfig(global::Kin.Agora.Transaction.V4.GetServiceConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMinimumKinVersion returns the minimum Kin version that is supported.
      ///
      /// This version will _never_ decrease in non-test scenarios, as it indicates
      /// a global migration has occured.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse> GetMinimumKinVersion(global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetRecentBlockhash returns a recent block hash from the underlying network,
      /// which should be used when crafting transactions. If a transaction fails with
      /// DuplicateSignature or InvalidNonce, it is recommended that a new block hash
      /// is retrieved.
      ///
      /// Block hashes are expected to be valid for ~2 minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse> GetRecentBlockhash(global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetMinimumBalanceForRentExemption returns the minimum amount of lamports that
      /// must be in an account for it not to be garbage collected.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse> GetMinimumBalanceForRentExemption(global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetHistory returns the transaction history for an account,
      /// with additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetHistoryResponse> GetHistory(global::Kin.Agora.Transaction.V4.GetHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubmitTransaction submits a transaction.
      ///
      /// The transaction may include a single Memo[1] instruction.
      /// If a memo instruction is specified, it must be at position 0
      /// in the instruction array.
      ///
      /// If an invoice is provided, the Memo instruction must contain a
      /// Kin Binary memo[2], encoded as base64.
      ///
      ///: https://github.com/kinecosystem/agora-api-internal/blob/master/spec/memo.md
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.SubmitTransactionResponse> SubmitTransaction(global::Kin.Agora.Transaction.V4.SubmitTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTransaction returns a transaction and additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Transaction.V4.GetTransactionResponse> GetTransaction(global::Kin.Agora.Transaction.V4.GetTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Transaction</summary>
    public partial class TransactionClient : grpc::ClientBase<TransactionClient>
    {
      /// <summary>Creates a new client for Transaction</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TransactionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Transaction that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TransactionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TransactionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TransactionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetServiceConfig returns the service and token parameters for the token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetServiceConfigResponse GetServiceConfig(global::Kin.Agora.Transaction.V4.GetServiceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServiceConfig returns the service and token parameters for the token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetServiceConfigResponse GetServiceConfig(global::Kin.Agora.Transaction.V4.GetServiceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceConfig, null, options, request);
      }
      /// <summary>
      /// GetServiceConfig returns the service and token parameters for the token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetServiceConfigResponse> GetServiceConfigAsync(global::Kin.Agora.Transaction.V4.GetServiceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetServiceConfig returns the service and token parameters for the token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetServiceConfigResponse> GetServiceConfigAsync(global::Kin.Agora.Transaction.V4.GetServiceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceConfig, null, options, request);
      }
      /// <summary>
      /// GetMinimumKinVersion returns the minimum Kin version that is supported.
      ///
      /// This version will _never_ decrease in non-test scenarios, as it indicates
      /// a global migration has occured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse GetMinimumKinVersion(global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinimumKinVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMinimumKinVersion returns the minimum Kin version that is supported.
      ///
      /// This version will _never_ decrease in non-test scenarios, as it indicates
      /// a global migration has occured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse GetMinimumKinVersion(global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMinimumKinVersion, null, options, request);
      }
      /// <summary>
      /// GetMinimumKinVersion returns the minimum Kin version that is supported.
      ///
      /// This version will _never_ decrease in non-test scenarios, as it indicates
      /// a global migration has occured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse> GetMinimumKinVersionAsync(global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinimumKinVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMinimumKinVersion returns the minimum Kin version that is supported.
      ///
      /// This version will _never_ decrease in non-test scenarios, as it indicates
      /// a global migration has occured.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse> GetMinimumKinVersionAsync(global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMinimumKinVersion, null, options, request);
      }
      /// <summary>
      /// GetRecentBlockhash returns a recent block hash from the underlying network,
      /// which should be used when crafting transactions. If a transaction fails with
      /// DuplicateSignature or InvalidNonce, it is recommended that a new block hash
      /// is retrieved.
      ///
      /// Block hashes are expected to be valid for ~2 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse GetRecentBlockhash(global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecentBlockhash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRecentBlockhash returns a recent block hash from the underlying network,
      /// which should be used when crafting transactions. If a transaction fails with
      /// DuplicateSignature or InvalidNonce, it is recommended that a new block hash
      /// is retrieved.
      ///
      /// Block hashes are expected to be valid for ~2 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse GetRecentBlockhash(global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecentBlockhash, null, options, request);
      }
      /// <summary>
      /// GetRecentBlockhash returns a recent block hash from the underlying network,
      /// which should be used when crafting transactions. If a transaction fails with
      /// DuplicateSignature or InvalidNonce, it is recommended that a new block hash
      /// is retrieved.
      ///
      /// Block hashes are expected to be valid for ~2 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse> GetRecentBlockhashAsync(global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecentBlockhashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetRecentBlockhash returns a recent block hash from the underlying network,
      /// which should be used when crafting transactions. If a transaction fails with
      /// DuplicateSignature or InvalidNonce, it is recommended that a new block hash
      /// is retrieved.
      ///
      /// Block hashes are expected to be valid for ~2 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse> GetRecentBlockhashAsync(global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecentBlockhash, null, options, request);
      }
      /// <summary>
      /// GetMinimumBalanceForRentExemption returns the minimum amount of lamports that
      /// must be in an account for it not to be garbage collected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse GetMinimumBalanceForRentExemption(global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinimumBalanceForRentExemption(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMinimumBalanceForRentExemption returns the minimum amount of lamports that
      /// must be in an account for it not to be garbage collected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse GetMinimumBalanceForRentExemption(global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMinimumBalanceForRentExemption, null, options, request);
      }
      /// <summary>
      /// GetMinimumBalanceForRentExemption returns the minimum amount of lamports that
      /// must be in an account for it not to be garbage collected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse> GetMinimumBalanceForRentExemptionAsync(global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMinimumBalanceForRentExemptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetMinimumBalanceForRentExemption returns the minimum amount of lamports that
      /// must be in an account for it not to be garbage collected.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse> GetMinimumBalanceForRentExemptionAsync(global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMinimumBalanceForRentExemption, null, options, request);
      }
      /// <summary>
      /// GetHistory returns the transaction history for an account,
      /// with additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetHistoryResponse GetHistory(global::Kin.Agora.Transaction.V4.GetHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetHistory returns the transaction history for an account,
      /// with additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetHistoryResponse GetHistory(global::Kin.Agora.Transaction.V4.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistory, null, options, request);
      }
      /// <summary>
      /// GetHistory returns the transaction history for an account,
      /// with additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetHistoryResponse> GetHistoryAsync(global::Kin.Agora.Transaction.V4.GetHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetHistory returns the transaction history for an account,
      /// with additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetHistoryResponse> GetHistoryAsync(global::Kin.Agora.Transaction.V4.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistory, null, options, request);
      }
      /// <summary>
      /// SubmitTransaction submits a transaction.
      ///
      /// The transaction may include a single Memo[1] instruction.
      /// If a memo instruction is specified, it must be at position 0
      /// in the instruction array.
      ///
      /// If an invoice is provided, the Memo instruction must contain a
      /// Kin Binary memo[2], encoded as base64.
      ///
      ///: https://github.com/kinecosystem/agora-api-internal/blob/master/spec/memo.md
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.SubmitTransactionResponse SubmitTransaction(global::Kin.Agora.Transaction.V4.SubmitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubmitTransaction submits a transaction.
      ///
      /// The transaction may include a single Memo[1] instruction.
      /// If a memo instruction is specified, it must be at position 0
      /// in the instruction array.
      ///
      /// If an invoice is provided, the Memo instruction must contain a
      /// Kin Binary memo[2], encoded as base64.
      ///
      ///: https://github.com/kinecosystem/agora-api-internal/blob/master/spec/memo.md
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.SubmitTransactionResponse SubmitTransaction(global::Kin.Agora.Transaction.V4.SubmitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitTransaction, null, options, request);
      }
      /// <summary>
      /// SubmitTransaction submits a transaction.
      ///
      /// The transaction may include a single Memo[1] instruction.
      /// If a memo instruction is specified, it must be at position 0
      /// in the instruction array.
      ///
      /// If an invoice is provided, the Memo instruction must contain a
      /// Kin Binary memo[2], encoded as base64.
      ///
      ///: https://github.com/kinecosystem/agora-api-internal/blob/master/spec/memo.md
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.SubmitTransactionResponse> SubmitTransactionAsync(global::Kin.Agora.Transaction.V4.SubmitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubmitTransaction submits a transaction.
      ///
      /// The transaction may include a single Memo[1] instruction.
      /// If a memo instruction is specified, it must be at position 0
      /// in the instruction array.
      ///
      /// If an invoice is provided, the Memo instruction must contain a
      /// Kin Binary memo[2], encoded as base64.
      ///
      ///: https://github.com/kinecosystem/agora-api-internal/blob/master/spec/memo.md
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.SubmitTransactionResponse> SubmitTransactionAsync(global::Kin.Agora.Transaction.V4.SubmitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitTransaction, null, options, request);
      }
      /// <summary>
      /// GetTransaction returns a transaction and additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetTransactionResponse GetTransaction(global::Kin.Agora.Transaction.V4.GetTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTransaction returns a transaction and additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Transaction.V4.GetTransactionResponse GetTransaction(global::Kin.Agora.Transaction.V4.GetTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransaction, null, options, request);
      }
      /// <summary>
      /// GetTransaction returns a transaction and additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetTransactionResponse> GetTransactionAsync(global::Kin.Agora.Transaction.V4.GetTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTransaction returns a transaction and additional off-chain invoice data, if available.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Transaction.V4.GetTransactionResponse> GetTransactionAsync(global::Kin.Agora.Transaction.V4.GetTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransaction, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TransactionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TransactionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TransactionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetServiceConfig, serviceImpl.GetServiceConfig)
          .AddMethod(__Method_GetMinimumKinVersion, serviceImpl.GetMinimumKinVersion)
          .AddMethod(__Method_GetRecentBlockhash, serviceImpl.GetRecentBlockhash)
          .AddMethod(__Method_GetMinimumBalanceForRentExemption, serviceImpl.GetMinimumBalanceForRentExemption)
          .AddMethod(__Method_GetHistory, serviceImpl.GetHistory)
          .AddMethod(__Method_SubmitTransaction, serviceImpl.SubmitTransaction)
          .AddMethod(__Method_GetTransaction, serviceImpl.GetTransaction).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TransactionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetServiceConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetServiceConfigRequest, global::Kin.Agora.Transaction.V4.GetServiceConfigResponse>(serviceImpl.GetServiceConfig));
      serviceBinder.AddMethod(__Method_GetMinimumKinVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetMinimumKinVersionRequest, global::Kin.Agora.Transaction.V4.GetMinimumKinVersionResponse>(serviceImpl.GetMinimumKinVersion));
      serviceBinder.AddMethod(__Method_GetRecentBlockhash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetRecentBlockhashRequest, global::Kin.Agora.Transaction.V4.GetRecentBlockhashResponse>(serviceImpl.GetRecentBlockhash));
      serviceBinder.AddMethod(__Method_GetMinimumBalanceForRentExemption, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionRequest, global::Kin.Agora.Transaction.V4.GetMinimumBalanceForRentExemptionResponse>(serviceImpl.GetMinimumBalanceForRentExemption));
      serviceBinder.AddMethod(__Method_GetHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetHistoryRequest, global::Kin.Agora.Transaction.V4.GetHistoryResponse>(serviceImpl.GetHistory));
      serviceBinder.AddMethod(__Method_SubmitTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.SubmitTransactionRequest, global::Kin.Agora.Transaction.V4.SubmitTransactionResponse>(serviceImpl.SubmitTransaction));
      serviceBinder.AddMethod(__Method_GetTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Transaction.V4.GetTransactionRequest, global::Kin.Agora.Transaction.V4.GetTransactionResponse>(serviceImpl.GetTransaction));
    }

  }
}
#endregion
