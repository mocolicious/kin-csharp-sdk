// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: account/v4/account_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kin.Agora.Account.V4 {
  public static partial class Account
  {
    static readonly string __ServiceName = "kin.agora.account.v4.Account";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.CreateAccountRequest> __Marshaller_kin_agora_account_v4_CreateAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.CreateAccountRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.CreateAccountResponse> __Marshaller_kin_agora_account_v4_CreateAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.CreateAccountResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.GetAccountInfoRequest> __Marshaller_kin_agora_account_v4_GetAccountInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.GetAccountInfoRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.GetAccountInfoResponse> __Marshaller_kin_agora_account_v4_GetAccountInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.GetAccountInfoResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest> __Marshaller_kin_agora_account_v4_ResolveTokenAccountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse> __Marshaller_kin_agora_account_v4_ResolveTokenAccountsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.GetEventsRequest> __Marshaller_kin_agora_account_v4_GetEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.GetEventsRequest.Parser));
    static readonly grpc::Marshaller<global::Kin.Agora.Account.V4.Events> __Marshaller_kin_agora_account_v4_Events = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Kin.Agora.Account.V4.Events.Parser));

    static readonly grpc::Method<global::Kin.Agora.Account.V4.CreateAccountRequest, global::Kin.Agora.Account.V4.CreateAccountResponse> __Method_CreateAccount = new grpc::Method<global::Kin.Agora.Account.V4.CreateAccountRequest, global::Kin.Agora.Account.V4.CreateAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_kin_agora_account_v4_CreateAccountRequest,
        __Marshaller_kin_agora_account_v4_CreateAccountResponse);

    static readonly grpc::Method<global::Kin.Agora.Account.V4.GetAccountInfoRequest, global::Kin.Agora.Account.V4.GetAccountInfoResponse> __Method_GetAccountInfo = new grpc::Method<global::Kin.Agora.Account.V4.GetAccountInfoRequest, global::Kin.Agora.Account.V4.GetAccountInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountInfo",
        __Marshaller_kin_agora_account_v4_GetAccountInfoRequest,
        __Marshaller_kin_agora_account_v4_GetAccountInfoResponse);

    static readonly grpc::Method<global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest, global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse> __Method_ResolveTokenAccounts = new grpc::Method<global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest, global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResolveTokenAccounts",
        __Marshaller_kin_agora_account_v4_ResolveTokenAccountsRequest,
        __Marshaller_kin_agora_account_v4_ResolveTokenAccountsResponse);

    static readonly grpc::Method<global::Kin.Agora.Account.V4.GetEventsRequest, global::Kin.Agora.Account.V4.Events> __Method_GetEvents = new grpc::Method<global::Kin.Agora.Account.V4.GetEventsRequest, global::Kin.Agora.Account.V4.Events>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetEvents",
        __Marshaller_kin_agora_account_v4_GetEventsRequest,
        __Marshaller_kin_agora_account_v4_Events);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kin.Agora.Account.V4.AccountServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Account</summary>
    [grpc::BindServiceMethod(typeof(Account), "BindService")]
    public abstract partial class AccountBase
    {
      /// <summary>
      /// CreateAccount creates a kin token account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Account.V4.CreateAccountResponse> CreateAccount(global::Kin.Agora.Account.V4.CreateAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetAccountInfo returns the information of a specified account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Account.V4.GetAccountInfoResponse> GetAccountInfo(global::Kin.Agora.Account.V4.GetAccountInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ResolveTokenAccounts resolves a set of Token Accounts owned by the specified account ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse> ResolveTokenAccounts(global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetEvents returns a stream of events related to the specified account.
      ///
      /// Note: Only events occurring after stream initiation will be returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetEvents(global::Kin.Agora.Account.V4.GetEventsRequest request, grpc::IServerStreamWriter<global::Kin.Agora.Account.V4.Events> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Account</summary>
    public partial class AccountClient : grpc::ClientBase<AccountClient>
    {
      /// <summary>Creates a new client for Account</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AccountClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Account that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AccountClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AccountClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AccountClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateAccount creates a kin token account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.CreateAccountResponse CreateAccount(global::Kin.Agora.Account.V4.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateAccount creates a kin token account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.CreateAccountResponse CreateAccount(global::Kin.Agora.Account.V4.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// CreateAccount creates a kin token account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.CreateAccountResponse> CreateAccountAsync(global::Kin.Agora.Account.V4.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateAccount creates a kin token account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.CreateAccountResponse> CreateAccountAsync(global::Kin.Agora.Account.V4.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// GetAccountInfo returns the information of a specified account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.GetAccountInfoResponse GetAccountInfo(global::Kin.Agora.Account.V4.GetAccountInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAccountInfo returns the information of a specified account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.GetAccountInfoResponse GetAccountInfo(global::Kin.Agora.Account.V4.GetAccountInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountInfo, null, options, request);
      }
      /// <summary>
      /// GetAccountInfo returns the information of a specified account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.GetAccountInfoResponse> GetAccountInfoAsync(global::Kin.Agora.Account.V4.GetAccountInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAccountInfo returns the information of a specified account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.GetAccountInfoResponse> GetAccountInfoAsync(global::Kin.Agora.Account.V4.GetAccountInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountInfo, null, options, request);
      }
      /// <summary>
      /// ResolveTokenAccounts resolves a set of Token Accounts owned by the specified account ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse ResolveTokenAccounts(global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResolveTokenAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResolveTokenAccounts resolves a set of Token Accounts owned by the specified account ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse ResolveTokenAccounts(global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResolveTokenAccounts, null, options, request);
      }
      /// <summary>
      /// ResolveTokenAccounts resolves a set of Token Accounts owned by the specified account ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse> ResolveTokenAccountsAsync(global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResolveTokenAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResolveTokenAccounts resolves a set of Token Accounts owned by the specified account ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse> ResolveTokenAccountsAsync(global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResolveTokenAccounts, null, options, request);
      }
      /// <summary>
      /// GetEvents returns a stream of events related to the specified account.
      ///
      /// Note: Only events occurring after stream initiation will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Kin.Agora.Account.V4.Events> GetEvents(global::Kin.Agora.Account.V4.GetEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetEvents returns a stream of events related to the specified account.
      ///
      /// Note: Only events occurring after stream initiation will be returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Kin.Agora.Account.V4.Events> GetEvents(global::Kin.Agora.Account.V4.GetEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetEvents, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AccountClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccountClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AccountBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_GetAccountInfo, serviceImpl.GetAccountInfo)
          .AddMethod(__Method_ResolveTokenAccounts, serviceImpl.ResolveTokenAccounts)
          .AddMethod(__Method_GetEvents, serviceImpl.GetEvents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AccountBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Account.V4.CreateAccountRequest, global::Kin.Agora.Account.V4.CreateAccountResponse>(serviceImpl.CreateAccount));
      serviceBinder.AddMethod(__Method_GetAccountInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Account.V4.GetAccountInfoRequest, global::Kin.Agora.Account.V4.GetAccountInfoResponse>(serviceImpl.GetAccountInfo));
      serviceBinder.AddMethod(__Method_ResolveTokenAccounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Kin.Agora.Account.V4.ResolveTokenAccountsRequest, global::Kin.Agora.Account.V4.ResolveTokenAccountsResponse>(serviceImpl.ResolveTokenAccounts));
      serviceBinder.AddMethod(__Method_GetEvents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Kin.Agora.Account.V4.GetEventsRequest, global::Kin.Agora.Account.V4.Events>(serviceImpl.GetEvents));
    }

  }
}
#endregion
