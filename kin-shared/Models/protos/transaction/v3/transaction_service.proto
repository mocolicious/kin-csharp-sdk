syntax = "proto3";

package kin.agora.transaction.v3;

option go_package = "github.com/kinecosystem/agora-api/genproto/transaction/v3;transaction";
option java_package = "org.kin.agora.gen.transaction.v3";
option objc_class_prefix = "APBTransactionV3";

import "validate/validate.proto";
import "common/v3/model.proto";

service Transaction {
    // GetHistory returns the transaction history for an account,
    // with additional off-chain invoice data, if available.
    rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);

    // SubmitTransaction submits a transaction.
    //
    // If the memo does not conform to the Kin binary memo format,
    // the transaction is not eligible for whitelisting.
    //
    // If the memo _does_ conform to the Kin binary memo format,
    // the transaction may be whitelisted depending on app
    // configuration.
    //
    // See: https://github.com/kinecosystem/agora-api/blob/master/spec/memo.md
    rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);

    // GetTransaction returns a transaction and additional off-chain
    // invoice data, if available.
    rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
}

message GetHistoryRequest {
    // Account to get history for.
    common.v3.StellarAccountId account_id = 1 [(validate.rules).message.required = true];

    // An optional history cursor indicating where in
    // the history to 'resume' from.
    Cursor cursor = 2;

    // The order in which to return history items from
    // the cursor.
    Direction direction = 3;
    enum Direction {
        // ASC direction returns all history items in
        // ascending (based on chain order) from the cursor.
        ASC  = 0;

        // DESC direction returns all history items in
        // descending (based on chain order) from _before_ the cursor.
        DESC = 1;
    }
}

message GetHistoryResponse {
    Result result = 1;
    enum Result {
        OK        = 0;
        NOT_FOUND = 1;
    }

    repeated HistoryItem items = 2 [(validate.rules).repeated = {
        min_items: 0
        max_items: 128
    }];
}

message SubmitTransactionRequest {
    // The raw XDR bytes (not base64-encoded) of the transaction envelope.
    bytes envelope_xdr = 1 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];

    // An optional invoice list associating each operation with an invoice.
    //
    // If an invoice list is included, it is expected that the foreign key in
    // the transaction memo is the SHA-224 hash of the serialized invoice list.
    //
    // The invoice list will be included in webhook calls for the application the
    // transaction pertains to (as specified by the memo app index).
    //
    // The submitted invoice data will only be available for retrieval from the service it
    // was submitted to and not directly from the blockchain nor any other deployments of
    // the service.
    common.v3.InvoiceList invoice_list = 2;
}

message SubmitTransactionResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // There was an issue with submitting the transaction
        // to the underlying chain. Clients should retry with
        // a rebuilt transaction in case there is temporal
        // issues with the transaction, such as sequence number,
        // or some other chain-specific errors. The detail of
        // the error is present in the result xdr.
        FAILED = 1;

        // Indicates that the configured webhook for this transaction
        // rejected the transaction without a specified reason.
        REJECTED = 2;

        // Indicates there was an error with one or more of the
        // supplied invoices.
        //
        // See: invoice_errors.
        INVOICE_ERROR = 3;
    }

    // Present when result = INVOICE_ERROR.
    repeated common.v3.InvoiceError invoice_errors = 2;

    // The hash of the transaction, if it was submitted.
    // May be used for other RPCs.
    common.v3.TransactionHash hash = 3;

    // The ledger in which the submitted transaction was included in.
    //
    // Non-zero on success.
    int64 ledger = 4 [jstype = JS_STRING];

    // The transaction result XDR, if a transaction was submitted.
    bytes result_xdr = 5 [(validate.rules).bytes = {
        min_len: 0
        max_len: 10240
    }];
}

message GetTransactionRequest {
    common.v3.TransactionHash transaction_hash = 1 [(validate.rules).message.required = true];
}

message GetTransactionResponse {
    // The state of the transaction. The states are the same as
    // SubmitTransaction, with the exception of UNKNOWN, which indicates
    // that the system does not have a record of the transaction. This
    // can occur if the transaction is still pending or if it has failed.
    //
    // If the transaction state is UNKNOWN for an extended period of
    // time, it is likely that it was dropped. As a result, clients
    // should limit the total times GetTransaction is called for a
    // an UNKNOWN transaction.
    State state = 1;
    enum State {
        UNKNOWN = 0;
        SUCCESS = 1;
    }

    // Non-zero when state == State::SUCCESS
    int64 ledger = 2 [jstype = JS_STRING];

    // Present when state != State::UNKNOWN
    HistoryItem item = 3;
}

message HistoryItem {
    // The hash of the transaction.
    common.v3.TransactionHash hash = 1 [(validate.rules).message.required = true];

    // Contains the transaction result from when the transaction was submitted
    bytes result_xdr = 2 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];

    // Contains the transaction envelope for the transaction.
    bytes envelope_xdr = 3 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];

    // The cursor position of this item.
    Cursor cursor = 4;

    // If an invoice list was submitted with the transaction, and the transaction
    // was submitted via this instance of the service, this field will be set.
    common.v3.InvoiceList invoice_list = 5;
}

message Cursor {
    bytes value = 1 [(validate.rules).bytes = {
        min_len: 1
        max_len: 128
    }];
}
