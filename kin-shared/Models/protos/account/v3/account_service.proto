syntax = "proto3";

package kin.agora.account.v3;

option go_package = "github.com/kinecosystem/agora-api/genproto/account/v3;account";
option java_package = "org.kin.agora.gen.account.v3";
option objc_class_prefix = "APBAccountV3";

import "validate/validate.proto";
import "common/v3/model.proto";

service Account {
    // CreateAccount creates an account using a the service's configured seed
    // account.
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);

    // GetAccountInfo returns the information of a specified account.
    rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse);

    // GetEvents returns a stream of events related to the specified account.
    //
    // Note: Only events occurring after stream initiation will be returned.
    rpc GetEvents(GetEventsRequest) returns (stream Events);
}

message AccountInfo {
    common.v3.StellarAccountId account_id = 1 [(validate.rules).message.required = true];

    // The last known sequence number of the account.
    int64 sequence_number = 2 [jstype = JS_STRING];

    // The last known balance, in quarks, of the account.
    int64 balance = 3 [jstype = JS_STRING];
}

message CreateAccountRequest {
    // Account to be created
    common.v3.StellarAccountId account_id = 1 [(validate.rules).message.required = true];
}

message CreateAccountResponse {
    Result result = 1;
    enum Result {
        OK = 0;
        EXISTS = 1;
    }

    // Will be present if the account was created or already existed.
    AccountInfo account_info = 2;
}

message GetAccountInfoRequest {
    common.v3.StellarAccountId account_id = 1 [(validate.rules).message.required = true];
}

message GetAccountInfoResponse {
    Result result = 1;
    enum Result {
        OK = 0;

        // The specified account could not be found.
        NOT_FOUND = 1;
    }

    // Present iff result == Result::OK
    AccountInfo account_info = 2;
}

message GetEventsRequest {
    // The id of the account to stream events for
    common.v3.StellarAccountId account_id = 1 [(validate.rules).message.required = true];
}

message Events {
    Result result = 1;
    enum Result {
        OK = 0;

        // The specified account could not be found.
        NOT_FOUND = 1;
    }

    repeated Event events = 2 [(validate.rules).repeated = {
        max_items: 128
    }];
}

message Event {
    oneof type {
        AccountUpdateEvent account_update_event = 1;
        TransactionEvent transaction_event = 2;
    }
}

// An event that gets sent when an account's information has changed.
message AccountUpdateEvent {
    // The account information most recently obtained by the service.
    AccountInfo account_info = 1 [(validate.rules).message.required = true];
}

// An event that gets sent when a transaction related to an account has been
// successfully submitted to the blockchain.
message TransactionEvent {
    // The transaction envelope XDR.
    bytes envelope_xdr = 1 [(validate.rules).bytes = {
        min_len: 1
        max_len: 10240
    }];

    // The transaction result XDR.
    bytes result_xdr = 2 [(validate.rules).bytes = {
        min_len: 0
        max_len: 10240
    }];
}
